# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
# üìå –°–æ–∑–¥–∞—Ç—å API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å
# –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å, –æ–±–Ω–æ–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Task —Å –ø–æ–ª—è–º–∏ id, title, description –∏ status.
# üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ tasks –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (–º–µ—Ç–æ–¥ GET).
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ POST).
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ PUT).
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ DELETE).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.


from typing import Optional
from fastapi import FastAPI
from pydantic import BaseModel
import logging
import uvicorn
from random import randint as rnd

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()


class Task(BaseModel):
    id: int
    title: str
    description: Optional[str] = "–°–≤–æ–±–æ–¥–Ω–æ–µ –ø–æ–ª–µ"
    status: bool


class TaskIn(BaseModel):
    title: str
    description: Optional[str] = "–°–≤–æ–±–æ–¥–Ω–æ–µ –ø–æ–ª–µ"
    status: bool


tasks = []


@app.get('/', response_model=list[Task])
async def root():
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET-–∑–∞–ø—Ä–æ—Å')
    return tasks


@app.post("/tasks/", response_model=Task)
async def create_task(task: TaskIn):
    id = len(tasks) + 1
    new_task = Task
    new_task.id = id
    new_task.title = task.title
    new_task.description = task.description
    new_task.status = task.status
    tasks.append(new_task)
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª POST-–∑–∞–ø—Ä–æ—Å')
    return new_task


@app.get("/{id}", response_model=Task)
async def find_task(id: int):
    for task in tasks:
        if task.id == id:
            logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª find-–∑–∞–ø—Ä–æ—Å')
            return task


@app.put("/tasks/{task_id}", response_model=Task)
async def update_task(task_id: int, task: Task):
    logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª PUT-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–¥–∞—á–∏ task_id = {task_id}')
    return {"task_id": task_id, "task": task}


@app.delete("/tasks/{task_id}")
async def delete_task(task_id: int):
    logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª DELETE-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–¥–∞—á–∏ task_id = {task_id}')
    return {"task_id": task_id}


if __name__ == '__main__':
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)
    print(tasks)
